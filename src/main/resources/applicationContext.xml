<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<context:component-scan base-package="com.zys.platform">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- spring的配置文件，这里配置和业务逻辑有关的 -->
	<!-- 数据源 事务控制等等 -->
	<context:property-placeholder
		location="classpath:jdbc.properties" /><!-- jdbc.properties -->
		<!-- jdbc.properties -->
	<bean id="poolDataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- 配置和mybatis的整合 -->
	<!-- 配置SqlSessionFactoryBean整合MyBatis -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定MyBatis全局配置文件位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 装配数据源 -->
		<property name="dataSource" ref="poolDataSource" />

		<!-- 指定Mapper.xml配置文件位置 -->
		<property name="mapperLocations"
			value="classpath:mapper/*Mapper.xml" />
	</bean>
	<!-- 配置扫描器 将mybatis接口的实现加入ioc容器配置MapperScannerConfigurer来扫描Mapper接口所在的包 -->
	<bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有的dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.zys.platform.dao" />
	</bean>
	
	<!-- 配置一个可以执行批量的sqlSession -->
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	<!-- 事务控制 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 -->
		<property name="dataSource" ref="poolDataSource"></property>
	</bean>
	<!-- 开启基于注解的事物，使用xml配置形式事务（必要主要的都是使用配置形式） -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut
			expression="execution(* com.zys.platform.service..*(..))" id="txPoint" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
	</aop:config>
	<!-- 配置事物增强，事物如何切入 -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<!-- 所有方法都是事物方法 -->
			<tx:method name="*" />
			<!-- 以get开始的所有方法 -->
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- spring配置文件的核心点（数据源、与mybatis的整合、事物控制） -->
</beans>
